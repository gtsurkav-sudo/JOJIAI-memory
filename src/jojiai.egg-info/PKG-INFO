Metadata-Version: 2.4
Name: jojiai
Version: 1.0.0
Summary: AI-powered memory system with race condition fixes and comprehensive monitoring
Home-page: https://github.com/gtsurkav-sudo/JOJIAI
Author: JOJI Oi Development Team
Author-email: JOJI Oi Development Team <dev@jojiai.com>
Maintainer-email: JOJI Oi Development Team <dev@jojiai.com>
License: MIT
Project-URL: Homepage, https://github.com/gtsurkav-sudo/JOJIAI
Project-URL: Documentation, https://github.com/gtsurkav-sudo/JOJIAI/wiki
Project-URL: Repository, https://github.com/gtsurkav-sudo/JOJIAI
Project-URL: Bug Tracker, https://github.com/gtsurkav-sudo/JOJIAI/issues
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Python: >=3.9
Description-Content-Type: text/markdown
Requires-Dist: prometheus-client>=0.17.0
Requires-Dist: python-json-logger>=2.0.0
Requires-Dist: click>=8.0.0
Provides-Extra: dev
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: isort>=5.12.0; extra == "dev"
Requires-Dist: flake8>=6.0.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Requires-Dist: bandit>=1.7.0; extra == "dev"
Requires-Dist: safety>=2.3.0; extra == "dev"
Provides-Extra: test
Requires-Dist: pytest>=7.0.0; extra == "test"
Requires-Dist: pytest-cov>=4.0.0; extra == "test"
Requires-Dist: pytest-xdist>=3.0.0; extra == "test"
Requires-Dist: pytest-mock>=3.10.0; extra == "test"
Requires-Dist: pytest-timeout>=2.1.0; extra == "test"
Requires-Dist: pytest-benchmark>=4.0.0; extra == "test"
Requires-Dist: memory-profiler>=0.60.0; extra == "test"
Requires-Dist: psutil>=5.9.0; extra == "test"
Provides-Extra: monitoring
Requires-Dist: grafana-client>=3.5.0; extra == "monitoring"
Requires-Dist: alertmanager-client>=1.0.0; extra == "monitoring"
Dynamic: author
Dynamic: home-page
Dynamic: requires-python

# JOJIAI - AI-Powered Project

[![CI Pipeline](https://github.com/gtsurkav-sudo/JOJIAI/actions/workflows/ci.yml/badge.svg)](https://github.com/gtsurkav-sudo/JOJIAI/actions/workflows/ci.yml)
[![Coverage](https://codecov.io/gh/gtsurkav-sudo/JOJIAI/branch/main/graph/badge.svg)](https://codecov.io/gh/gtsurkav-sudo/JOJIAI)
[![Python 3.10+](https://img.shields.io/badge/python-3.10+-blue.svg)](https://www.python.org/downloads/)
[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)

AI-powered project with comprehensive CI/CD pipeline, automated testing, and quality assurance.

## üöÄ Features

- **Comprehensive CI/CD Pipeline**: Automated testing, linting, and deployment
- **Multi-Python Support**: Compatible with Python 3.10, 3.11, and 3.12
- **Quality Assurance**: 80%+ code coverage requirement
- **Security Scanning**: Automated security vulnerability detection
- **Code Formatting**: Consistent code style with Black and Flake8

## üìã Requirements

- Python 3.10 or higher
- pip (Python package installer)

## üõ†Ô∏è Installation

### Development Installation

```bash
# Clone the repository
git clone https://github.com/gtsurkav-sudo/JOJIAI.git
cd JOJIAI

# Create virtual environment
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate

# Install in development mode
pip install -e ".[dev,test]"
```

### Production Installation

```bash
pip install jojiai
```

## üß™ Running Tests

### Run All Tests
```bash
pytest
```

### Run Tests with Coverage
```bash
pytest --cov=src --cov-branch --cov-report=html --cov-report=term-missing
```

### Run Specific Test Categories
```bash
# Unit tests only
pytest tests/unit/

# Integration tests only
pytest tests/integration/

# Slow tests excluded
pytest -m "not slow"
```

## üîç Code Quality

### Linting and Formatting
```bash
# Format code with Black
black src/ tests/

# Check code style
black --check src/ tests/

# Run Flake8 linter
flake8 src/ tests/

# Run type checking
mypy src/
```

### Security Scanning
```bash
# Run security scan
bandit -r src/
```

## üöÄ –ó–∞–ø—É—Å–∫ CI –ª–æ–∫–∞–ª—å–Ω–æ

### –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
- Python 3.10, 3.11, –∏–ª–∏ 3.12
- Git
- Make (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

### –®–∞–≥–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ CI

1. **–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π**:
   ```bash
   pip install -e ".[dev,test]"
   ```

2. **–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞**:
   ```bash
   black src/ tests/
   ```

3. **–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è –∫–æ–¥–∞**:
   ```bash
   black --check --diff src/ tests/
   flake8 src/ tests/
   ```

4. **–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º**:
   ```bash
   pytest --cov=src --cov-branch --cov-report=html --cov-report=xml --cov-report=term-missing --cov-fail-under=80
   ```

5. **–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏**:
   ```bash
   bandit -r src/ -f json -o bandit-report.json
   ```

6. **–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏**:
   ```bash
   # –û—Ç–∫—Ä–æ–π—Ç–µ htmlcov/index.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ
   open htmlcov/index.html  # macOS
   xdg-open htmlcov/index.html  # Linux
   start htmlcov/index.html  # Windows
   ```

### –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å Make (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

–°–æ–∑–¥–∞–π—Ç–µ `Makefile` –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥:

```makefile
.PHONY: install format lint test security ci

install:
	pip install -e ".[dev,test]"

format:
	black src/ tests/

lint:
	black --check --diff src/ tests/
	flake8 src/ tests/

test:
	pytest --cov=src --cov-branch --cov-report=html --cov-report=xml --cov-report=term-missing --cov-fail-under=80

security:
	bandit -r src/ -f json -o bandit-report.json

ci: format lint test security
	@echo "‚úÖ All CI checks passed!"
```

–ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–π—Ç–µ:
```bash
make ci
```

### Pre-commit —Ö—É–∫–∏

–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ pre-commit —Ö—É–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:

```bash
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ pre-commit
pip install pre-commit

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ö—É–∫–æ–≤
pre-commit install

# –ó–∞–ø—É—Å–∫ –Ω–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö
pre-commit run --all-files
```

## üìä CI/CD Pipeline

–ù–∞—à CI/CD pipeline –≤–∫–ª—é—á–∞–µ—Ç:

### ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
- **–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ**: Black code formatter
- **–õ–∏–Ω—Ç–∏–Ω–≥**: Flake8 —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–ª–∞–≥–∏–Ω–∞–º–∏
- **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ**: pytest —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º ‚â•80%
- **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å**: Bandit security scanner
- **–¢–∏–ø–∏–∑–∞—Ü–∏—è**: MyPy type checking

### üîÑ Matrix Testing
- Python 3.10, 3.11, 3.12
- Ubuntu Latest
- –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

### üìà –û—Ç—á–µ—Ç—ã
- HTML –æ—Ç—á–µ—Ç—ã –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
- XML –æ—Ç—á–µ—Ç—ã –¥–ª—è Codecov
- JSON –æ—Ç—á–µ—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –≤ GitHub Actions

### ‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
- –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ pip –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
- –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
- –ë—ã—Å—Ç—Ä—ã–π fail –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö

## üèóÔ∏è Project Structure

```
JOJIAI/
‚îú‚îÄ‚îÄ .github/
‚îÇ   ‚îî‚îÄ‚îÄ workflows/
‚îÇ       ‚îî‚îÄ‚îÄ ci.yml              # CI/CD pipeline
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îî‚îÄ‚îÄ jojiai/
‚îÇ       ‚îú‚îÄ‚îÄ __init__.py         # Package initialization
‚îÇ       ‚îú‚îÄ‚îÄ core.py             # Core functionality
‚îÇ       ‚îî‚îÄ‚îÄ utils.py            # Utility functions
‚îú‚îÄ‚îÄ tests/
‚îÇ   ‚îú‚îÄ‚îÄ unit/                   # Unit tests
‚îÇ   ‚îú‚îÄ‚îÄ integration/            # Integration tests
‚îÇ   ‚îî‚îÄ‚îÄ conftest.py             # Pytest configuration
‚îú‚îÄ‚îÄ reports/                    # Project reports
‚îú‚îÄ‚îÄ pyproject.toml              # Project configuration
‚îú‚îÄ‚îÄ .flake8                     # Flake8 configuration
‚îú‚îÄ‚îÄ .gitignore                  # Git ignore rules
‚îî‚îÄ‚îÄ README.md                   # This file
```

## ü§ù Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feat/amazing-feature`)
3. Make your changes
4. Run the full CI pipeline locally (`make ci`)
5. Commit your changes (`git commit -m 'Add amazing feature'`)
6. Push to the branch (`git push origin feat/amazing-feature`)
7. Open a Pull Request

### Contribution Guidelines

- Follow the existing code style (Black + Flake8)
- Write tests for new functionality
- Maintain or improve code coverage (‚â•80%)
- Update documentation as needed
- Add type hints for new functions

## üìù License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## üîó Links

- [GitHub Repository](https://github.com/gtsurkav-sudo/JOJIAI)
- [Issues](https://github.com/gtsurkav-sudo/JOJIAI/issues)
- [CI/CD Pipeline](https://github.com/gtsurkav-sudo/JOJIAI/actions)
- [Coverage Reports](https://codecov.io/gh/gtsurkav-sudo/JOJIAI)

## üìû Support

If you have any questions or need help, please:

1. Check the [documentation](https://github.com/gtsurkav-sudo/JOJIAI/wiki)
2. Search [existing issues](https://github.com/gtsurkav-sudo/JOJIAI/issues)
3. Create a [new issue](https://github.com/gtsurkav-sudo/JOJIAI/issues/new)

---

Made with ‚ù§Ô∏è by the JOJIAI Team
